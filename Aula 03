**INDEX01**
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CLima Tempo</title>
    <link rel="stylesheet" type="text/css" href="./css/Style08.css">
</head>
<body>
    <main>
        <header>
            <input type="text"/>
            <button type="submit">Pesquisar</button>
        </header>
        <div class="content" style="display: none;">
        <section>
            <h2 id="city"></h2>
            <span id="degree"></span>
        </section>
        <img src="./img/por.JPEG" alt="CLima"/>
        </div>
    </main>
    <script src="./js/Script08.js"></script>
</body>
</html>




**STYLE01**
body{
    background-color: #2F4F4F;
}
main{
    width: 100%;
       padding: 10px;
}
header{
    display: flex;
    align-items: center;
    gap: 5px;

}
input{
    padding: 5px;
    outline: none;
    cursor: pointer;

}
img{
    min-height: 120px;
    margin-left: 10px;
    background-image: radial-gradient(#b5b5b5,#f7f7f7 7%);

}
.content{
    margin-top: 10px;
    word-break: break-all;
}




**SCRIPTJS01**
const input = document.querySelector("input");
const button = document.querySelectorAll("button");

const city = document.querySelector("city");
const degree = document.querySelector("degree");

const content =document.querySelector("content");

button.addEventListener("click",() =>{
    if(!input.value)return;
    getWeatherData();
});

async function getWeatherData(){
    let urlApi = 'https://api.openweathermap.org/data/2.5';
    try{
        await fetch(urlApi)
        .then((res)=> res.json())
        .then((data)=>{
          if(data?.cod && data.cod ==="404"){
            return alert("Cidade não encontrada.");
          }
            loadWeatherInfo(data);
          })
        }catch(error){
            alert(error)

            }
        }
        function loadWeatherInfo(data){
            city.innerHTML =`${data.nome},${data.sys.country}`;
            degree. innerHTML=`Temperatura: ${Math.floor(data.main.temp)}° c`;
        Img.src =`http://openWeathermap.org/img/wn/${data.weather[0].icon}@2x.png`;
        content.style.display ="Flex";
        }



***INDEX02***
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cartoes</title>
    <link rel="stylesheet" type="text/css" href="./css/Style09.css">
</head>
<body>
    <div class="kanban">
        <div class="column">
            <div class="item" draggable="true">Card 01</div>    
            <div class="item" draggable="true">Card 02</div>    
        </div>
    <div class="column">
        <div class="item" draggable="true">Card 03</div>    
        <div class="item" draggable="true">Card 04</div>
    </div>

    <div class="column">
        <div class="item" draggable="true">Card 05</div>    
        <div class="item" draggable="true">Card 06</div>
    </div>
    
    <script src="./js/Script09.js"></script>
    
    </body>
</html>






***STYLE02***
.kanban{
    display: flex;
    justify-content: center;
    min-height: 400px;
    gap: 10px;
    padding: 10px;

}
.column{
    padding: 10px;
    min-width: 200px;
    border-radius: 5px;
    background-color: coral;
}
.item{
    background-color: white;
    border-radius: 5px;
    padding: 10px;
    margin: 10px 0;
}
.dragging{
    opacity: 0.5;
}







***SCRIPT02***
const columns = document.querySelectorAll(".column");
document.addEventListener("dragstart", (e) => {
    e.target.classList.add("dragging");
})
document.addEventListener("dragend", (e) => {
    e.target.classList.remove("dragging");
})
columns.forEach((item) => {
    item.addEventListener("dragover", (e) => {
        const dragging = document.querySelector(".dragging");
        const applyAfter = getNewPosition(item,e.clienty);
        if(applyAfter){
            applyAfter.insertAdjacentElement("afterend", dragging);
        }else{
            item.prepend(dragging);
        }
    })
})
function getNewPosition(column, positionY){
    const cards = column.querySelectorAll(".item:not(.dragging)");
    let result;
    for(let refer_card of cards){
        const box = refer_card.getBoundingClientRect();
        const boxCenterY = box.y + box.height / 2;

        if(positionY >= boxCenterY) result = refer_card;
    }
    return result;
}

